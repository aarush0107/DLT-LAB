#MAIN CODE


import idx2numpy
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense


train_images_path = r"C:\Users\aarus\OneDrive\Desktop\SRM\DLT\LAB 4\train-images.idx3-ubyte"
train_labels_path = r"C:\Users\aarus\OneDrive\Desktop\SRM\DLT\LAB 4\train-labels.idx1-ubyte"
test_images_path  = r"C:\Users\aarus\OneDrive\Desktop\SRM\DLT\LAB 4\t10k-images.idx3-ubyte"
test_labels_path  = r"C:\Users\aarus\OneDrive\Desktop\SRM\DLT\LAB 4\t10k-labels.idx1-ubyte"

X_train = idx2numpy.convert_from_file(train_images_path)
y_train = idx2numpy.convert_from_file(train_labels_path)
X_test  = idx2numpy.convert_from_file(test_images_path)
y_test  = idx2numpy.convert_from_file(test_labels_path)

X_train = X_train.astype("float32") / 255.0
X_test = X_test.astype("float32") / 255.0

X_train = X_train.reshape(-1, 28*28)
X_test = X_test.reshape(-1, 28*28)

print("Training set shape:", X_train.shape, y_train.shape)
print("Test set shape:", X_test.shape, y_test.shape)


model = Sequential([
    Dense(128, activation='relu', input_shape=(784,)),
    Dense(64, activation='relu'),
    Dense(10, activation='softmax')  
])

model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.1)

loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy*100:.2f}%")


model.save("mnist_ffnn_model.h5")
print("Model saved as mnist_ffnn_model.h5")




#TESTING CODE



import cv2
import numpy as np
import tensorflow as tf

model = tf.keras.models.load_model("mnist_ffnn_model.h5")

image_path = r"C:\Users\aarus\OneDrive\Desktop\SRM\DLT\LAB 4\test2.jpg"

img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

if img is None:
    raise FileNotFoundError(f"Image not found at {image_path}")

img = cv2.resize(img, (28, 28))

if np.mean(img) > 127:
    img = 255 - img

img = img.astype("float32") / 255.0

img = img.reshape(1, 28*28)

pred = model.predict(img)
predicted_digit = np.argmax(pred)

print(f"Predicted digit: {predicted_digit}")

